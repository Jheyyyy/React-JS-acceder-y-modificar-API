{"version":3,"sources":["Buscador.jsx","App.js","serviceWorker.js","index.js"],"names":["Buscador","state","User","Token","usuario_id","busquedaUser","busquedaToken","busquedaId","busqueda","React","createRef","busqueda1","busqueda2","handleCall","fetch","method","headers","body","JSON","stringify","then","x","json","datosDeBusqueda","props","handleBuscar","target","name","value","setState","Group","compact","ref","this","style","width","placeholder","type","onChange","onClick","icon","SearchOutlined","Component","App","informacion","buttonDisabled","origen_acceso_id","valor_acceso","codigo_estado","newInfo","handlePost","data","origen_acceso","map","elemento","i","update","message","success","codigo","mensaje","handleUpdate","stateData","Footer","Layout","Content","length","fila","datos","key","columns","title","dataIndex","render","row","index","justify","size","dataSource","locale","emptyText","scroll","disabled","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.64e2495d.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Input, Button, Row } from 'antd';\r\nimport { SearchOutlined } from '@ant-design/icons';\r\n\r\nclass Buscador extends Component {\r\n  state = {\r\n    User: 'xchohermenegildo',\r\n    Token: '11.8839813279919',\r\n    usuario_id: 51,\r\n    busquedaUser: '',\r\n    busquedaToken: '',\r\n    busquedaId: ''\r\n  }\r\n\r\n  busqueda = React.createRef();\r\n  busqueda1 = React.createRef();\r\n  busqueda2 = React.createRef();\r\n\r\n /* componentDidMount(){\r\n    this.handleCall()\r\n  }\r\n  */\r\n\r\n  handleCall = () => {\r\n    var { User, Token, usuario_id, busquedaUser, busquedaToken, busquedaId } = this.state\r\n    fetch('https://app.crmetric.com/srv-crmetric-web-cdc-test/rest/usuario/listarOrigenAcceso',\r\n      {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          \"Sess\": {\r\n            \"User\": busquedaUser || User,\r\n            \"Token\": busquedaToken || Token,\r\n            \"usuario_id\": busquedaId || usuario_id\r\n          }\r\n\r\n        })\r\n      })\r\n      .then(x => x.json())\r\n      .then(x => datosDeBusqueda(x))\r\n      var datosDeBusqueda = this.props.datosDeBusqueda\r\n  }\r\n\r\n\r\n  handleBuscar = ({ target }) => {\r\n    var { name, value } = target\r\n    this.setState({\r\n      [name]: value\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Row>\r\n        <Input.Group compact >\r\n          <Input ref={this.busqueda} style={{ width: '20%' }} placeholder=\"User\" name=\"busquedaUser\" type=\"text\" onChange={this.handleBuscar} />\r\n          <Input ref={this.busqueda1} style={{ width: '20%' }} placeholder=\"Token\" name=\"busquedaToken\" type=\"number\" onChange={this.handleBuscar} />\r\n          <Input ref={this.busqueda2} style={{ width: '20%' }} placeholder=\"User ID\" name=\"busquedaId\" type=\"number\" onChange={this.handleBuscar} />\r\n          <Button onClick={this.handleCall} type=\"primary\" icon={<SearchOutlined />}>Buscar</Button>\r\n        </Input.Group>\r\n      </Row>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Buscador;","import React, { useLayoutEffect } from 'react';\nimport './App.css';\nimport { Table, Input, Layout, Button, Row, message, Space, Col } from 'antd';\nimport Buscador from './Buscador'\nimport 'antd/dist/antd.css'; // or 'antd/dist/antd.less'\n\nclass App extends React.Component {\n  state = {\n    informacion: '',\n    buttonDisabled: true,\n    User: 'xchohermenegildo',\n    Token: '11.8839813279919',\n    origen_acceso_id: '',\n    valor_acceso: '',\n    codigo_estado: 1,\n    usuario_id: 15\n  }\n\n  datosDeBusqueda = (newInfo) => {\n    this.setState({ informacion: newInfo })\n  }\n\n\n  handlePost = () => {\n    var { User, Token, usuario_id, codigo_estado, usuario_id } = this.state\n    let data = this.state.informacion.data[0].origen_acceso;\n    data.map((elemento, i) => {\n      if (elemento.update === true) {\n        fetch('https://app.crmetric.com/srv-crmetric-web-cdc-test/rest/usuario/actualizarOrigenAcceso',\n          {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              \"Sess\": {\n                \"User\": User,\n                \"Token\": Token,\n                \"origen_acceso_id\": elemento.origen_acceso_id, // element\n                \"valor_acceso\": elemento.valor_acceso, // element\n                \"codigo_estado\": codigo_estado,\n                \"usuario_id\": usuario_id\n              }\n            })\n          })\n          .then(x => x.json())\n          .then(x => message.success(<p>CÃ³digo: {x.codigo} <br/> Mensaje: {x.mensaje} </p>))\n      }\n    })\n  }\n\n  handleUpdate = ({ target }) => {\n    this.setState({\n      buttonDisabled: false\n    })\n    var { name, value } = target\n    this.state.informacion.data[0].origen_acceso[name].valor_acceso = value;\n    this.state.informacion.data[0].origen_acceso[name].update = true;\n  }\n\n\n\n  render() {\n    var stateData = this.state.informacion\n    const { Footer, Content } = Layout;\n\n    if (stateData.data != null && stateData.data.length > 0) {\n      var recorrer = stateData.data[0].origen_acceso\n      var fila = recorrer.map((elemento, i) => {\n        var datos = elemento\n        datos.key = i\n        return datos\n      })\n    }\n\n    const columns = [\n      {\n        title: 'Codigo Estado',\n        dataIndex: 'codigo_estado',\n        key: 'codigo_estado',\n      },\n      {\n        title: 'Fecha Actualizacion',\n        dataIndex: 'fecha_actualizacion',\n        key: 'fecha_actualizacion',\n      },\n      {\n        title: 'Origen Acceso ID',\n        dataIndex: 'origen_acceso_id',\n        key: 'origen_acceso_id',\n      },\n      {\n        title: 'Tipo Acceso',\n        key: 'tipo_acceso',\n        dataIndex: 'tipo_acceso',\n      },\n      {\n        title: 'Usuario Actualizacion',\n        key: 'usuario_actualizacion',\n        dataIndex: 'usuario_actualizacion'\n      },\n      {\n        title: 'Usuario Login Actualizacion',\n        key: 'usuario_login_actualizacion',\n        dataIndex: 'usuario_login_actualizacion'\n      },\n      {\n        title: 'Valor Acceso',\n        key: 'valor_acceso',\n        dataIndex: 'valor_acceso',\n        render: (value, row, index) => {\n          return <Input value={value} name={index} onChange={this.handleUpdate} />\n        }\n      },\n    ];\n\n\n    return (\n      <Layout>\n        <Content >\n          <Row justify=\"center\">\n            <Col >\n              <Buscador datosDeBusqueda={this.datosDeBusqueda} />\n              <Space size=\"large\">\n                <Row>\n                  <Table columns={columns} dataSource={fila} locale={{ emptyText: 'No hay datos para mostrar' }} scroll={{ x: '1024px' }} />\n                </Row>\n              </Space>\n              <Footer>\n                <Button onClick={this.handlePost} type=\"primary\" disabled={this.state.buttonDisabled} >Actualizar Data</Button>\n              </Footer>\n            </Col>\n          </Row>\n        </Content>\n      </Layout>\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}